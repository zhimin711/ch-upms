apply plugin: 'java'
apply plugin: 'maven-publish'

task jarApiBuild(type: Jar, group: 'api') {
    //指定生成的jar名
    baseName "$project.name-api"

    //从哪里打包class文件'build/classes/'
//    from("$buildDir/classes/main")
    from "$buildDir/classes/java/main"

    //打包到jar后的目录结构
//    into('')
//    include('com/ch/**/dto/', 'com/ch/**/api/', 'com/ch/**/pojo/', 'com/ch/**/utils/')
    //去掉不需要打包的目录和文件
    exclude('**/upms/')

//    exclude('test/', 'BuildConfig.class')
    //去掉R$开头的文件
//    exclude{ it.name.startsWith('R$');}

}
jarApiBuild.dependsOn(build)

task jarApiSourceJar(type: Jar, group: 'api') {
    baseName "$project.name-api"
//    version "$project.version"
    classifier = 'sources'
    from sourceSets.main.allJava
    include('**/client/')
    exclude('**/upms/')
}
/*
task jarApiCopy(type: Copy) {
    from "$buildDir/libs"
    into "$parent.projectDir/libs"
    include "$project.name-api-${version}.jar"
}
jarApiCopy.dependsOn(jarApiBuild)
task jarApiDelete(type: Delete) {
    delete "libs/$project.name-api-${version}.jar"
    delete "$parent.projectDir/libs/$project.name-api-${version}.jar"
}
jarApiDelete.dependsOn(clean)
*/

//如果希望gradle install，安装到.m2本地仓库，参考下面的内容
/*
install {
    repositories.mavenInstaller {
        pom.version = "$project.version"
        pom.artifactId = "$project.name-api"
        pom.groupId = "$project.group"
    }
}
*/

//https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
    publications {
        api(MavenPublication) {
            groupId "$project.group"
            artifactId "$project.name-api"
            version "$project.version"
            artifacts = [jarApiBuild, jarApiSourceJar]
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = releaseUploadUrl
            def releaseUploadUserName = releaseUploadUserName
            def releaseUploadPassword = releaseUploadPassword
            def snapshotsRepoUrl = snapshotUploadUrl
            def snapshotUploadUserName = snapshotUploadUserName
            def snapshotUploadPassword = snapshotUploadPassword
            def username1 = version.endsWith('SNAPSHOT') ? snapshotUploadUserName : releaseUploadUserName
            def password1 = version.endsWith('SNAPSHOT') ? snapshotUploadPassword : releaseUploadPassword

            url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username username1
                password password1
            }
//            authentication {
//                basic(BasicAuthentication)
//            }
        }
    }
}



configure(allprojects) { project ->


    task deletePomXml(type:Delete){
        def targetPath = "${project.projectDir}";
        def targetFile = "pom.xml";
        def file = file(targetPath+"\\"+targetFile);
        if(file.exists()){
            setDelete(file);
            println("delete " + targetPath + "\\" + targetFile)
        }
    }

    //复制pom.xml文件
    task copyPomXml(type: Copy) {
        def resourcePath = "${project.buildDir}\\publications\\maven";
        def resourceFile = "pom-default.xml";
        def targetPath = "${project.projectDir}";
        def targetFile = "pom.xml";

        //源地址
        from(file(resourcePath))
        //包含文件
        include(resourceFile)
        //写入目标地址
        into(file(targetPath))
        //重命名
        rename { filename ->
            filename.replace filename, targetFile
        }
        //打印
        eachFile {
            println("from " + resourcePath + "\\" + it.name + " to " + targetPath + "\\" + targetFile)
        }
    }

    // 通过publishToMavenLocal生成pom.default.xml
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

}
